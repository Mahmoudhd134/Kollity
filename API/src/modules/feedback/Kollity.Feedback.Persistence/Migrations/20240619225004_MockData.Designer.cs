// <auto-generated />
using System;
using Kollity.Feedback.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kollity.Feedback.Persistence.Migrations
{
    [DbContext(typeof(FeedbackDbContext))]
    [Migration("20240619225004_MockData")]
    partial class MockData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("feedback")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kollity.Feedback.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("department");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_course");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_course_code");

                    b.ToTable("Course", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.CourseStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_course_student");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_course_student_student_id");

                    b.HasIndex("CourseId", "StudentId")
                        .HasDatabaseName("ix_course_student_course_id_student_id");

                    b.ToTable("CourseStudent", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_exam_room_id");

                    b.ToTable("Exam", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.FeedbackModels.FeedbackAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("answer");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<string>("StringAnswer")
                        .HasMaxLength(4095)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string_answer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_feedback_answer");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_feedback_answer_course_id");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_feedback_answer_doctor_id");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_feedback_answer_exam_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_feedback_answer_question_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_feedback_answer_student_id");

                    b.ToTable("FeedbackAnswer", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.FeedbackModels.FeedbackQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<bool>("IsMcq")
                        .HasColumnType("bit")
                        .HasColumnName("is_mcq");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("pk_feedback_question");

                    b.ToTable("FeedbackQuestion", "feedback");

                    b.HasData(
                        new
                        {
                            Id = new Guid("573472f1-76ae-43a4-887e-8c078b2e9cad"),
                            Category = 1,
                            IsMcq = true,
                            Question = "This is question one for course category"
                        },
                        new
                        {
                            Id = new Guid("43355478-d19d-45aa-abf3-8c576844a299"),
                            Category = 1,
                            IsMcq = true,
                            Question = "This is question two for course category"
                        },
                        new
                        {
                            Id = new Guid("24177208-8ff8-4a84-a593-c5dbed9aadd8"),
                            Category = 1,
                            IsMcq = false,
                            Question = "This is question three for course category"
                        },
                        new
                        {
                            Id = new Guid("a9124653-d42d-4b77-8dd3-0201a116220f"),
                            Category = 3,
                            IsMcq = true,
                            Question = "This is question one for exam category"
                        },
                        new
                        {
                            Id = new Guid("af166444-2b76-49f9-9111-68d119477d3a"),
                            Category = 3,
                            IsMcq = true,
                            Question = "This is question two for exam category"
                        },
                        new
                        {
                            Id = new Guid("b08b7bbc-c6b2-4299-b76d-9426d19acb90"),
                            Category = 3,
                            IsMcq = false,
                            Question = "This is question three for exam category"
                        },
                        new
                        {
                            Id = new Guid("c0399a84-c7b3-436b-a5f3-0e3ff4d91ead"),
                            Category = 2,
                            IsMcq = true,
                            Question = "This is question one for doctor category"
                        },
                        new
                        {
                            Id = new Guid("333f54dd-7804-4a1a-928d-a8206eb95286"),
                            Category = 2,
                            IsMcq = true,
                            Question = "This is question two for doctor category"
                        },
                        new
                        {
                            Id = new Guid("3455fa29-f38a-499e-ad13-68052d32dedb"),
                            Category = 2,
                            IsMcq = false,
                            Question = "This is question three for doctor category"
                        });
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_room_course_id");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_room_doctor_id");

                    b.ToTable("Room", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.RoomUser", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("RoomId", "UserId")
                        .HasName("pk_room_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_room_user_user_id");

                    b.ToTable("RoomUser", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("user_name");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("User", "feedback");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.CourseStudent", b =>
                {
                    b.HasOne("Kollity.Feedback.Domain.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_course_student_course_course_id");

                    b.HasOne("Kollity.Feedback.Domain.User", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_course_student_users_student_id");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Exam", b =>
                {
                    b.HasOne("Kollity.Feedback.Domain.Room", "Room")
                        .WithMany("Exams")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_exam_rooms_room_id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.FeedbackModels.FeedbackAnswer", b =>
                {
                    b.HasOne("Kollity.Feedback.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_feedback_answer_course_course_id");

                    b.HasOne("Kollity.Feedback.Domain.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_feedback_answer_users_doctor_id");

                    b.HasOne("Kollity.Feedback.Domain.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_feedback_answer_exam_exam_id");

                    b.HasOne("Kollity.Feedback.Domain.FeedbackModels.FeedbackQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_answer_feedback_questions_question_id");

                    b.HasOne("Kollity.Feedback.Domain.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_answer_users_student_id");

                    b.Navigation("Course");

                    b.Navigation("Doctor");

                    b.Navigation("Exam");

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Room", b =>
                {
                    b.HasOne("Kollity.Feedback.Domain.Course", "Course")
                        .WithMany("Rooms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_room_course_course_id");

                    b.HasOne("Kollity.Feedback.Domain.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_room_users_doctor_id");

                    b.Navigation("Course");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.RoomUser", b =>
                {
                    b.HasOne("Kollity.Feedback.Domain.Room", "Room")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_room_user_room_room_id");

                    b.HasOne("Kollity.Feedback.Domain.User", "User")
                        .WithMany("RoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_room_user_users_user_id");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Course", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.Room", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("RoomUsers");
                });

            modelBuilder.Entity("Kollity.Feedback.Domain.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("RoomUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
