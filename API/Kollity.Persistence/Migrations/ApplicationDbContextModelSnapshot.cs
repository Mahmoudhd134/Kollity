// <auto-generated />
using System;
using Kollity.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kollity.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<byte>("Degree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)20)
                        .HasColumnName("degree");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update_date");

                    b.Property<int>("Mode")
                        .HasColumnType("int")
                        .HasColumnName("mode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("name");

                    b.Property<DateTime>("OpenUntilDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("open_until_date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("pk_assigment");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_assigment_doctor_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_assigment_room_id");

                    b.ToTable("Assigment", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignmentGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_group_id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_id");

                    b.Property<byte?>("Degree")
                        .HasColumnType("tinyint")
                        .HasColumnName("degree");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("file");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("upload_date");

                    b.HasKey("Id")
                        .HasName("pk_assignment_answer");

                    b.HasIndex("AssignmentGroupId")
                        .HasDatabaseName("ix_assignment_answer_assignment_group_id");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_assignment_answer_assignment_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_assignment_answer_student_id");

                    b.ToTable("AssignmentAnswer", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentAnswerDegree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_id");

                    b.Property<byte>("Degree")
                        .HasColumnType("tinyint")
                        .HasColumnName("degree");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_assignment_answer_degree");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_assignment_answer_degree_answer_id");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_assignment_answer_degree_assignment_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_assignment_answer_degree_group_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_assignment_answer_degree_student_id");

                    b.ToTable("AssignmentAnswerDegree", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("upload_date");

                    b.HasKey("Id")
                        .HasName("pk_assignment_file");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_assignment_file_assignment_id");

                    b.ToTable("AssignmentFile", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("code");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("pk_assignment_group");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_assignment_group_code");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_assignment_group_room_id");

                    b.ToTable("AssignmentGroup", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroupStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignmentGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_group_id");

                    b.Property<bool>("JoinRequestAccepted")
                        .HasColumnType("bit")
                        .HasColumnName("join_request_accepted");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_assignment_group_student");

                    b.HasIndex("AssignmentGroupId")
                        .HasDatabaseName("ix_assignment_group_student_assignment_group_id");

                    b.HasIndex("StudentId", "AssignmentGroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_assignment_group_student_student_id_assignment_group_id");

                    b.ToTable("AssignmentGroupStudent", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.CourseModels.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("department");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_course");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_course_code");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_course_doctor_id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.CourseModels.CourseAssistant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AssistantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assistant_id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.HasKey("Id")
                        .HasName("pk_course_assistant");

                    b.HasIndex("AssistantId")
                        .HasDatabaseName("ix_course_assistant_assistant_id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_assistant_course_id");

                    b.HasIndex("CourseId", "AssistantId")
                        .IsUnique()
                        .HasDatabaseName("ix_course_assistant_course_id_assistant_id");

                    b.ToTable("CourseAssistant", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_exam");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_exam_room_id");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<Guid>("ExamQuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_question_id");

                    b.Property<Guid>("ExamQuestionOptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_question_option_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("request_time");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("submit_time");

                    b.HasKey("Id")
                        .HasName("pk_exam_answer");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_answer_exam_id");

                    b.HasIndex("ExamQuestionId")
                        .HasDatabaseName("ix_exam_answer_exam_question_id");

                    b.HasIndex("ExamQuestionOptionId")
                        .HasDatabaseName("ix_exam_answer_exam_question_option_id");

                    b.HasIndex("StudentId", "ExamQuestionId")
                        .IsUnique()
                        .HasDatabaseName("ix_exam_answer_student_id_exam_question_id")
                        .HasFilter("[student_id] IS NOT NULL");

                    b.ToTable("ExamAnswer", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

<<<<<<< HEAD
=======
                    b.Property<byte>("Degree")
                        .HasColumnType("tinyint")
                        .HasColumnName("degree");

>>>>>>> 7034548f3e71eede6acd9fb1d886973eeab3616e
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<int>("OpenForSeconds")
                        .HasColumnType("int")
                        .HasColumnName("open_for_seconds");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("pk_exam_question");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_exam_question_exam_id");

                    b.ToTable("ExamQuestion", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ExamQuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_question_id");

                    b.Property<bool>("IsRightOption")
                        .HasColumnType("bit")
                        .HasColumnName("is_right_option");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("option");

                    b.HasKey("Id")
                        .HasName("pk_exam_question_option");

                    b.HasIndex("ExamQuestionId")
                        .HasDatabaseName("ix_exam_question_option_exam_question_id");

                    b.ToTable("ExamQuestionOption", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.Identity.Role.BaseRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("be2a5cab-0ae7-4335-8316-4154a5cfa35f"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("126abefb-6d50-4d58-9419-c8e1f39a01d8"),
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("bf9c94d0-ca32-4b64-aa5a-3c03b44db740"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("6ddc2275-7ae1-40ca-9f6f-c5b5c637c5d8"),
                            Name = "Assistant",
                            NormalizedName = "ASSISTANT"
                        });
                });

            modelBuilder.Entity("Kollity.Domain.Identity.User.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

<<<<<<< HEAD
=======
                    b.Property<bool>("EnabledEmailNotifications")
                        .HasColumnType("bit")
                        .HasColumnName("enabled_email_notifications");

>>>>>>> 7034548f3e71eede6acd9fb1d886973eeab3616e
                    b.Property<string>("FullNameInArabic")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)")
                        .HasColumnName("full_name_in_arabic");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[normalized_email] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_user_name")
                        .HasFilter("[user_name] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Kollity.Domain.Identity.UserRefreshToken.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_refresh_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_token_user_id");

                    b.HasIndex("UserId", "UserAgent")
                        .IsUnique()
                        .HasDatabaseName("ix_user_refresh_token_user_id_user_agent")
                        .HasFilter("[user_agent] IS NOT NULL");

                    b.ToTable("UserRefreshToken", (string)null);
                });

<<<<<<< HEAD
=======
            modelBuilder.Entity("Kollity.Domain.Messages.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccuredOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("occured_on");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_message");

                    b.HasIndex("ProcessedOn")
                        .HasDatabaseName("ix_outbox_message_processed_on");

                    b.ToTable("OutboxMessage", (string)null);
                });

>>>>>>> 7034548f3e71eede6acd9fb1d886973eeab3616e
            modelBuilder.Entity("Kollity.Domain.RoomModels.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<byte>("AssignmentGroupMaxLength")
                        .HasColumnType("tinyint")
                        .HasColumnName("assignment_group_max_length");

                    b.Property<bool>("AssignmentGroupOperationsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("assignment_group_operations_enabled");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<bool>("EnsureJoinRequest")
                        .HasColumnType("bit")
                        .HasColumnName("ensure_join_request");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(227)
                        .HasColumnType("nvarchar(227)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_room_course_id");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("ix_room_doctor_id");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.RoomContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("name");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("upload_time");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uploader_id");

                    b.HasKey("Id")
                        .HasName("pk_room_content");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_room_content_room_id");

                    b.HasIndex("UploaderId")
                        .HasDatabaseName("ix_room_content_uploader_id");

                    b.ToTable("RoomContent", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.RoomMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("File")
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("file");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sender_id");

                    b.Property<string>("Text")
                        .HasMaxLength(4067)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_room_message");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_room_message_room_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_room_message_sender_id");

                    b.ToTable("RoomMessage", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.UserRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit")
                        .HasColumnName("is_supervisor");

                    b.Property<bool>("JoinRequestAccepted")
                        .HasColumnType("bit")
                        .HasColumnName("join_request_accepted");

                    b.Property<DateTime>("LastOnlineDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_online_date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_room");

                    b.HasIndex("IsSupervisor")
                        .HasDatabaseName("ix_user_room_is_supervisor");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_user_room_room_id");

                    b.HasIndex("UserId", "RoomId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_room_user_id_room_id");

                    b.ToTable("UserRoom", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.StudentModels.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_student_course");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_student_course_course_id");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("ix_student_course_student_id_course_id");

                    b.ToTable("StudentCourse", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claim_role_id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b26c556f-d543-4a2a-b15a-49fba7751ffa"),
                            RoleId = new Guid("be2a5cab-0ae7-4335-8316-4154a5cfa35f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Kollity.Domain.DoctorModels.Doctor", b =>
                {
                    b.HasBaseType("Kollity.Domain.Identity.User.BaseUser");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b26c556f-d543-4a2a-b15a-49fba7751ffa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a443bf96-da75-4046-8452-7d64553b4533",
                            Email = "nassermahmoud571@gmail.com",
                            EmailConfirmed = false,
<<<<<<< HEAD
=======
                            EnabledEmailNotifications = false,
>>>>>>> 7034548f3e71eede6acd9fb1d886973eeab3616e
                            FullNameInArabic = "Mahmoud Ahmed Nasser Mahmoud",
                            LockoutEnabled = true,
                            NormalizedEmail = "NASSERMAHMOUD571@GMAIL.COM",
                            NormalizedUserName = "MAHMOUDHD134",
                            PasswordHash = "AQAAAAIAAYagAAAAEPRFyxksWTOaY3gzYwnqUGS8FT0q1kCjlaUo1KP/Uu3R1seoxDWoi1tlyw8Uc69YNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6TPMB3KY7R4NAIGXTMKLOWGRE2HQOOBY",
                            TwoFactorEnabled = false,
                            UserName = "Mahmoudhd134"
                        });
                });

            modelBuilder.Entity("Kollity.Domain.StudentModels.Student", b =>
                {
                    b.HasBaseType("Kollity.Domain.Identity.User.BaseUser");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_user_code")
                        .HasFilter("[code] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.Assignment", b =>
                {
                    b.HasOne("Kollity.Domain.DoctorModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_assigment_asp_net_users_doctor_id");

                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("Assignments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigment_rooms_room_id");

                    b.Navigation("Doctor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentAnswer", b =>
                {
                    b.HasOne("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", "AssignmentGroup")
                        .WithMany("AssignmentsAnswers")
                        .HasForeignKey("AssignmentGroupId")
                        .HasConstraintName("fk_assignment_answer_assignment_groups_assignment_group_id");

                    b.HasOne("Kollity.Domain.AssignmentModels.Assignment", "Assignment")
                        .WithMany("AssignmentsAnswers")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_answer_assignments_assignment_id");

                    b.HasOne("Kollity.Domain.StudentModels.Student", "Student")
                        .WithMany("AssignmentsAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_assignment_answer_asp_net_users_student_id");

                    b.Navigation("Assignment");

                    b.Navigation("AssignmentGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentAnswerDegree", b =>
                {
                    b.HasOne("Kollity.Domain.AssignmentModels.AssignmentAnswer", "Answer")
                        .WithMany("GroupDegrees")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_answer_degree_assignment_answer_answer_id");

                    b.HasOne("Kollity.Domain.AssignmentModels.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_answer_degree_assignments_assignment_id");

                    b.HasOne("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_answer_degree_assignment_groups_group_id");

                    b.HasOne("Kollity.Domain.StudentModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_answer_degree_asp_net_users_student_id");

                    b.Navigation("Answer");

                    b.Navigation("Assignment");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentFile", b =>
                {
                    b.HasOne("Kollity.Domain.AssignmentModels.Assignment", "Assignment")
                        .WithMany("AssignmentFiles")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_file_assigment_assignment_id");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", b =>
                {
                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("AssignmentGroups")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_group_rooms_room_id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroupStudent", b =>
                {
                    b.HasOne("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", "AssignmentGroup")
                        .WithMany("AssignmentGroupsStudents")
                        .HasForeignKey("AssignmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_group_student_assignment_group_assignment_group_id");

                    b.HasOne("Kollity.Domain.StudentModels.Student", "Student")
                        .WithMany("AssignmentGroupsStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_group_student_asp_net_users_student_id");

                    b.Navigation("AssignmentGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Domain.CourseModels.Course", b =>
                {
                    b.HasOne("Kollity.Domain.DoctorModels.Doctor", "Doctor")
                        .WithMany("Courses")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_course_asp_net_users_doctor_id");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Kollity.Domain.CourseModels.CourseAssistant", b =>
                {
                    b.HasOne("Kollity.Domain.DoctorModels.Doctor", "Assistant")
                        .WithMany("CoursesAssistants")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_course_assistant_asp_net_users_assistant_id");

                    b.HasOne("Kollity.Domain.CourseModels.Course", "Course")
                        .WithMany("CoursesAssistants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_assistant_courses_course_id");

                    b.Navigation("Assistant");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.Exam", b =>
                {
                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("Exams")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_rooms_room_id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamAnswer", b =>
                {
                    b.HasOne("Kollity.Domain.ExamModels.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_exam_answer_exams_exam_id");

                    b.HasOne("Kollity.Domain.ExamModels.ExamQuestion", "ExamQuestion")
                        .WithMany("ExamAnswers")
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_exam_answer_exam_questions_exam_question_id");

                    b.HasOne("Kollity.Domain.ExamModels.ExamQuestionOption", "ExamQuestionOption")
                        .WithMany("ExamAnswers")
                        .HasForeignKey("ExamQuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_answer_exam_question_options_exam_question_option_id");

                    b.HasOne("Kollity.Domain.StudentModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_exam_answer_asp_net_users_student_id");

                    b.Navigation("Exam");

                    b.Navigation("ExamQuestion");

                    b.Navigation("ExamQuestionOption");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestion", b =>
                {
                    b.HasOne("Kollity.Domain.ExamModels.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_question_exam_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestionOption", b =>
                {
                    b.HasOne("Kollity.Domain.ExamModels.ExamQuestion", "ExamQuestion")
                        .WithMany("ExamQuestionOptions")
                        .HasForeignKey("ExamQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_question_option_exam_question_exam_question_id");

                    b.Navigation("ExamQuestion");
                });

            modelBuilder.Entity("Kollity.Domain.Identity.UserRefreshToken.UserRefreshToken", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_token_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.Room", b =>
                {
                    b.HasOne("Kollity.Domain.CourseModels.Course", "Course")
                        .WithMany("Rooms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_course_course_id");

                    b.HasOne("Kollity.Domain.DoctorModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_room_user_doctor_id");

                    b.Navigation("Course");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.RoomContent", b =>
                {
                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("RoomContents")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_content_room_room_id");

                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_room_content_user_uploader_id");

                    b.Navigation("Room");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.RoomMessage", b =>
                {
                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("RoomMessages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_message_room_room_id");

                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_room_message_user_sender_id");

                    b.Navigation("Room");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.UserRoom", b =>
                {
                    b.HasOne("Kollity.Domain.RoomModels.Room", "Room")
                        .WithMany("UsersRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_room_room_room_id");

                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", "User")
                        .WithMany("UsersRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_room_user_user_id");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kollity.Domain.StudentModels.StudentCourse", b =>
                {
                    b.HasOne("Kollity.Domain.CourseModels.Course", "Course")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_course_course_id");

                    b.HasOne("Kollity.Domain.StudentModels.Student", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_course_user_student_id");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.Role.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claim_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.Role.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Kollity.Domain.Identity.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_asp_net_users_user_id");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.Assignment", b =>
                {
                    b.Navigation("AssignmentFiles");

                    b.Navigation("AssignmentsAnswers");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentAnswer", b =>
                {
                    b.Navigation("GroupDegrees");
                });

            modelBuilder.Entity("Kollity.Domain.AssignmentModels.AssignmentGroupModels.AssignmentGroup", b =>
                {
                    b.Navigation("AssignmentGroupsStudents");

                    b.Navigation("AssignmentsAnswers");
                });

            modelBuilder.Entity("Kollity.Domain.CourseModels.Course", b =>
                {
                    b.Navigation("CoursesAssistants");

                    b.Navigation("Rooms");

                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.Exam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestion", b =>
                {
                    b.Navigation("ExamAnswers");

                    b.Navigation("ExamQuestionOptions");
                });

            modelBuilder.Entity("Kollity.Domain.ExamModels.ExamQuestionOption", b =>
                {
                    b.Navigation("ExamAnswers");
                });

            modelBuilder.Entity("Kollity.Domain.Identity.User.BaseUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UsersRooms");
                });

            modelBuilder.Entity("Kollity.Domain.RoomModels.Room", b =>
                {
                    b.Navigation("AssignmentGroups");

                    b.Navigation("Assignments");

                    b.Navigation("Exams");

                    b.Navigation("RoomContents");

                    b.Navigation("RoomMessages");

                    b.Navigation("UsersRooms");
                });

            modelBuilder.Entity("Kollity.Domain.DoctorModels.Doctor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("CoursesAssistants");
                });

            modelBuilder.Entity("Kollity.Domain.StudentModels.Student", b =>
                {
                    b.Navigation("AssignmentGroupsStudents");

                    b.Navigation("AssignmentsAnswers");

                    b.Navigation("StudentsCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
